{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/niels/Projects/school/niels-bosman/client/6/6-2/src/components/App.js\";\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { ItemList } from './ItemList';\nimport { IFrameView } from './IFrameView';\nimport { PreferencesDialog } from './Preferences'; //============================================================================\n//  The React component that renders the UI for the entire App.\n//----------------------------------------------------------------------------\n\nvar App = function App(props) {\n  var selectedItem = useSelector(function (state) {\n    return state.hnItems.selectedItem;\n  });\n  var showingPrefs = useSelector(function (state) {\n    return state.prefs.showingPrefs;\n  });\n  var color = useSelector(function (state) {\n    return state.prefs.currentColor;\n  });\n  var contentPanel;\n\n  if (showingPrefs) {\n    contentPanel = /*#__PURE__*/React.createElement(\"div\", {\n      id: \"ContentPanel\",\n      className: \"preferences\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PreferencesDialog, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }));\n  } else if (selectedItem !== null && selectedItem !== undefined) {\n    contentPanel = /*#__PURE__*/React.createElement(\"div\", {\n      id: \"ContentPanel\",\n      className: \"item\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(IFrameView, {\n      url: selectedItem.url,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    contentPanel = /*#__PURE__*/React.createElement(\"div\", {\n      id: \"ContentPanel\",\n      className: \"empty\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, \"No item selected yet.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, \"Select an item in the colum on the left.\"));\n  }\n\n  var cssClasses = 'App ' + color;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: cssClasses,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"ListPanel\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ItemList, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })), contentPanel);\n}; //============================================================================\n//  Connecting the ItemListUI to the Redux Store results in a new\n//  React component that can talk to the Store, and provide the UI-component\n//  with the data-props it needs.\n//    Note how we don't ask for data or actions that are needed for its\n//  children (ItemList and IFrameView). The ItemList will have its own\n//  connection to the store. The IFrameView can be supplied its URL from\n//  the data that the AppUI needs anyway (the SelectedItem).\n//    Also note that the App does not need any functions to change the state.\n//  Only the ItemList and the PreferencesDialog change parts of the state in\n//  the Redux store.\n//----------------------------------------------------------------------------\n\n\nexport { App };","map":{"version":3,"sources":["/home/niels/Projects/school/niels-bosman/client/6/6-2/src/components/App.js"],"names":["React","useSelector","ItemList","IFrameView","PreferencesDialog","App","props","selectedItem","state","hnItems","showingPrefs","prefs","color","currentColor","contentPanel","undefined","url","cssClasses"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,iBAAT,QAAkC,eAAlC,C,CAEA;AACA;AACA;;AACA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD,EAAW;AACrB,MAAMC,YAAY,GAAGN,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACC,OAAN,CAAcF,YAAzB;AAAA,GAAD,CAAhC;AACA,MAAMG,YAAY,GAAGT,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACG,KAAN,CAAYD,YAAvB;AAAA,GAAD,CAAhC;AACA,MAAME,KAAK,GAAGX,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACG,KAAN,CAAYE,YAAvB;AAAA,GAAD,CAAzB;AAEA,MAAIC,YAAJ;;AAEA,MAAIJ,YAAJ,EAAkB;AAChBI,IAAAA,YAAY,gBACV;AAAK,MAAA,EAAE,EAAC,cAAR;AAAuB,MAAA,SAAS,EAAC,aAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD,GAND,MAMO,IAAIP,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAKQ,SAA9C,EAAyD;AAC9DD,IAAAA,YAAY,gBACV;AAAK,MAAA,EAAE,EAAC,cAAR;AAAuB,MAAA,SAAS,EAAC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAEP,YAAY,CAACS,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD,GANM,MAMA;AACLF,IAAAA,YAAY,gBACV;AAAK,MAAA,EAAE,EAAC,cAAR;AAAuB,MAAA,SAAS,EAAC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAFF,CADF;AAMD;;AACD,MAAMG,UAAU,GAAG,SAASL,KAA5B;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEK,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIGH,YAJH,CADF;AAQD,CArCD,C,CAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAST,GAAT","sourcesContent":["import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { ItemList } from './ItemList'\nimport { IFrameView } from './IFrameView'\nimport { PreferencesDialog } from './Preferences'\n\n//============================================================================\n//  The React component that renders the UI for the entire App.\n//----------------------------------------------------------------------------\nconst App = (props) => {\n  const selectedItem = useSelector((state) => state.hnItems.selectedItem)\n  const showingPrefs = useSelector((state) => state.prefs.showingPrefs)\n  const color = useSelector((state) => state.prefs.currentColor)\n\n  let contentPanel\n\n  if (showingPrefs) {\n    contentPanel = (\n      <div id=\"ContentPanel\" className=\"preferences\">\n        <PreferencesDialog />\n      </div>\n    )\n  } else if (selectedItem !== null && selectedItem !== undefined) {\n    contentPanel = (\n      <div id=\"ContentPanel\" className=\"item\">\n        <IFrameView url={selectedItem.url} />\n      </div>\n    )\n  } else {\n    contentPanel = (\n      <div id=\"ContentPanel\" className=\"empty\">\n        <h2>No item selected yet.</h2>\n        <p>Select an item in the colum on the left.</p>\n      </div>\n    )\n  }\n  const cssClasses = 'App ' + color\n\n  return (\n    <div className={cssClasses}>\n      <div id=\"ListPanel\">\n        <ItemList />\n      </div>\n      {contentPanel}\n    </div>\n  )\n}\n\n//============================================================================\n//  Connecting the ItemListUI to the Redux Store results in a new\n//  React component that can talk to the Store, and provide the UI-component\n//  with the data-props it needs.\n//    Note how we don't ask for data or actions that are needed for its\n//  children (ItemList and IFrameView). The ItemList will have its own\n//  connection to the store. The IFrameView can be supplied its URL from\n//  the data that the AppUI needs anyway (the SelectedItem).\n//    Also note that the App does not need any functions to change the state.\n//  Only the ItemList and the PreferencesDialog change parts of the state in\n//  the Redux store.\n//----------------------------------------------------------------------------\n\nexport { App }\n"]},"metadata":{},"sourceType":"module"}