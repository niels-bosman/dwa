{"ast":null,"code":"import _defineProperty from \"/home/niels/Projects/school/niels-bosman/client/6/6-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/niels/Projects/school/niels-bosman/client/6/6-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/home/niels/Projects/school/niels-bosman/client/6/6-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/niels/Projects/school/niels-bosman/client/6/6-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { combineReducers } from 'redux'; // import { produce } from 'immer'\n//=====================================================================\n//    State management for HN Items and their read/seen-statuses\n//---------------------------------------------------------------------\n// Action Creators:\n\nexport function markAsSeenAction(listSize) {\n  return {\n    type: 'markAsSeenAction',\n    listSize: listSize\n  };\n}\nexport function toggleItemAction(item) {\n  return {\n    type: 'toggleItemAction',\n    payload: item\n  };\n}\nexport var fetchHNItems = function fetchHNItems() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var response, HNItems;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: 'hnitems/loading'\n              });\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch('http://localhost:3000/hn/topstories');\n\n            case 4:\n              response = _context.sent;\n\n              if (response.ok) {\n                _context.next = 7;\n                break;\n              }\n\n              throw new Error();\n\n            case 7:\n              _context.next = 9;\n              return response.json();\n\n            case 9:\n              HNItems = _context.sent;\n              return _context.abrupt(\"return\", dispatch({\n                type: 'hnitems/loaded',\n                payload: HNItems\n              }));\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", dispatch({\n                type: 'hnitems/error',\n                payload: 'error loading items!'\n              }));\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 13]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var fetchStatuses = function fetchStatuses() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var response, statuses;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch({\n                type: 'fetchStatuses/loading'\n              });\n              _context2.prev = 1;\n              _context2.next = 4;\n              return fetch('http://localhost:3000/itemStatuses');\n\n            case 4:\n              response = _context2.sent;\n\n              if (response.ok) {\n                _context2.next = 7;\n                break;\n              }\n\n              throw new Error();\n\n            case 7:\n              _context2.next = 9;\n              return response.json();\n\n            case 9:\n              statuses = _context2.sent;\n              return _context2.abrupt(\"return\", dispatch({\n                type: 'fetchStatuses/loaded',\n                payload: statuses\n              }));\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](1);\n              return _context2.abrupt(\"return\", dispatch({\n                type: 'fetchStatuses/error',\n                payload: 'error loading statuses!'\n              }));\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 13]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var markAsSeen = function markAsSeen(listSize) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n      var state, urls;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch({\n                type: 'updateStatuses/loading'\n              });\n              _context3.prev = 1;\n              state = getState().hnItems;\n              urls = [];\n              state.items.slice(0, listSize).forEach(function (item) {\n                if (state.statuses[item.id] === undefined) {\n                  urls.push(\"http://localhost:3000/itemStatuses/\".concat(item.id));\n                }\n              });\n              _context3.next = 7;\n              return Promise.all(urls.map(function (url) {\n                return fetch(url, {\n                  method: 'PUT',\n                  headers: {\n                    'Content-Type': 'text/plain'\n                  },\n                  body: 'seen'\n                }).then(function (response) {\n                  if (!response.ok) throw new Error();\n                }).then(function () {\n                  return console.log(url);\n                });\n              }));\n\n            case 7:\n              dispatch({\n                type: 'updateStatuses/success',\n                payload: listSize\n              });\n              _context3.next = 13;\n              break;\n\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](1);\n              dispatch({\n                type: 'updateStatuses/error',\n                payload: 'Error updating statuses!'\n              });\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 10]]);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var toggleItemStatus = function toggleItemStatus(item) {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch, getState) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              dispatch({\n                type: 'toggleStatus/loading'\n              });\n              _context4.prev = 1;\n              _context4.next = 4;\n              return fetch(\"http://localhost:3000/itemStatuses/\".concat(item.id), {\n                method: 'PUT',\n                headers: {\n                  'Content-Type': 'text/plain'\n                },\n                body: 'read'\n              });\n\n            case 4:\n              response = _context4.sent;\n\n              if (response.ok) {\n                _context4.next = 7;\n                break;\n              }\n\n              throw new Error();\n\n            case 7:\n              dispatch({\n                type: 'toggleStatus/success',\n                payload: item\n              });\n              _context4.next = 13;\n              break;\n\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](1);\n              dispatch({\n                type: 'toggleStatus/error',\n                payload: _context4.t0.message\n              });\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 10]]);\n    }));\n\n    return function (_x5, _x6) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n}; // Reducer:\n\nvar initialHNItemsState = {\n  items: [],\n  itemsLoading: false,\n  error: null,\n  selectedItem: null,\n  statuses: [],\n  statusesLoading: false\n};\n\nfunction hnItemsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialHNItemsState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  // Note how all branches of the switch-statement always return\n  // (a new version of) the state. Reducers must always return a (new) state.\n  switch (action.type) {\n    case 'hnitems/loaded':\n      return _objectSpread({}, state, {\n        items: action.payload,\n        itemsLoading: false\n      });\n\n    case 'hnitems/loading':\n      return _objectSpread({}, state, {\n        itemsLoading: true\n      });\n\n    case 'hnitems/error':\n      return _objectSpread({}, state, {\n        itemsLoading: false,\n        error: action.payload\n      });\n\n    case 'fetchStatuses/loaded':\n      return _objectSpread({}, state, {\n        statuses: action.payload,\n        statusesLoading: false\n      });\n\n    case 'fetchStatuses/loading':\n      return _objectSpread({}, state, {\n        statusesLoading: true\n      });\n\n    case 'fetchStatuses/error':\n      return _objectSpread({}, state, {\n        statusesLoading: false,\n        error: action.payload\n      });\n\n    case 'updateStatus/loading':\n      return _objectSpread({}, state, {\n        statusesLoading: true\n      });\n\n    case 'updateStatus/error':\n      return _objectSpread({}, state, {\n        statusesLoading: false,\n        error: action.payload\n      });\n\n    case 'toggleStatus/loading':\n      return _objectSpread({}, state, {\n        statusesLoading: true\n      });\n\n    case 'toggleStatus/success':\n      if (state.selectedItem) {\n        if (action.payload.id === state.selectedItem.id) {\n          return _objectSpread({}, state, {\n            selectedItem: null\n          });\n        }\n      }\n\n      var newStatuses = _objectSpread({}, state.statuses, _defineProperty({}, action.payload.id, 'read'));\n\n      return _objectSpread({}, state, {\n        selectedItem: action.payload,\n        statuses: newStatuses,\n        statusesLoading: false\n      });\n\n    case 'toggleStatus/error':\n      return _objectSpread({}, state, {\n        error: action.payload,\n        statusesLoading: false\n      });\n\n    case 'updateStatuses/success':\n      newStatuses = _objectSpread({}, state.statuses);\n      state.items.forEach(function (itm, idx) {\n        if (idx < action.payload && state.statuses[itm.id] === undefined) {\n          newStatuses[itm.id] = 'seen';\n        }\n      });\n      return _objectSpread({}, state, {\n        statuses: newStatuses,\n        statusesLoading: false\n      });\n\n    case 'updateStatuses/loading':\n      return _objectSpread({}, state, {\n        statusesLoading: true\n      });\n\n    case 'updateStatuses/error':\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n} // ==============================================================\n//\n// using immer.js\n//\n// function hnItemsReducer(state = initialHNItemsState, action) {\n//   const reducers = {\n//     toggleItemAction: (draft, action) => {\n//       if (\n//         draft.item &&\n//         draft.selectedItem &&\n//         draft.item.id === draft.selectedItem.id\n//       ) {\n//         draft.selectedItem = null;\n//       } else {\n//         draft.statuses[action.item.id] = \"read\";\n//         draft.selectedItem = action.item;\n//       }\n//     },\n//     markAsSeenAction: (draft, action) => {\n//       draft.items.forEach((itm, idx) => {\n//         if (idx < action.listSize && draft.statuses[itm.id] === undefined) {\n//           draft.statuses[itm.id] = \"seen\";\n//         }\n//       });\n//     },\n//   };\n//   return produce(state, (draft) =>\n//     reducers[action.type] ? reducers[action.type](draft, action) : draft\n//   );\n// }\n//=====================================================================\n//    State management for the Preferences\n//---------------------------------------------------------------------\n// Action Creators:\n\n\nexport function showPrefsAction() {\n  return {\n    type: 'showPrefsAction'\n  };\n}\nexport function editListSizeAction(listSize) {\n  return {\n    type: 'editListSizeAction',\n    payload: listSize\n  };\n}\nexport function editColorAction(color) {\n  return {\n    type: 'editColorAction',\n    payload: color\n  };\n}\nexport function closePrefsAction() {\n  return {\n    type: 'closePrefsAction'\n  };\n}\nexport function closeAndApplyPrefsAction() {\n  return {\n    type: 'closeAndApplyPrefsAction'\n  };\n} // TODO: Add action creators for other redux-actions such as Cancel and OK, but also for editing controlled inputs for color and listSize.\n// Reducer:\n\nvar initialPreferencesState = {\n  showingPrefs: false,\n  editingColor: null,\n  editingListSize: null,\n  currentColor: 'orange',\n  currentListSize: 42\n};\n\nfunction preferencesReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialPreferencesState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  // Note how all branches of the switch-statement always return\n  // (a new version of) the state. Reducers must always return a (new) state.\n  var changes;\n\n  switch (action.type) {\n    case 'showPrefsAction':\n      changes = {\n        showingPrefs: true,\n        editingColor: state.currentColor,\n        editingListSize: state.currentListSize\n      };\n      return _objectSpread({}, state, changes);\n    // break; not needed: this branch always returns from function\n\n    case 'editListSizeAction':\n      changes = {\n        editingListSize: action.payload\n      };\n      return _objectSpread({}, state, changes);\n\n    case 'editColorAction':\n      changes = {\n        editingColor: action.payload\n      };\n      return _objectSpread({}, state, changes);\n\n    case 'closePrefsAction':\n      changes = {\n        showingPrefs: false,\n        editingColor: null,\n        editingListSize: null\n      };\n      return _objectSpread({}, state, changes);\n\n    case 'closeAndApplyPrefsAction':\n      changes = {\n        showingPrefs: false,\n        editingColor: null,\n        editingListSize: null,\n        currentColor: state.editingColor,\n        currentListSize: state.editingListSize\n      };\n      return _objectSpread({}, state, changes);\n\n    default:\n      return state;\n  }\n} //===========================================================================\n//  Combining the reducers and their state into a single reducer managing\n//  a single state\n//---------------------------------------------------------------------------\n\n\nexport var mainReducer = combineReducers({\n  hnItems: hnItemsReducer,\n  prefs: preferencesReducer\n});","map":{"version":3,"sources":["/home/niels/Projects/school/niels-bosman/client/6/6-2/src/reducers.js"],"names":["combineReducers","markAsSeenAction","listSize","type","toggleItemAction","item","payload","fetchHNItems","dispatch","fetch","response","ok","Error","json","HNItems","fetchStatuses","statuses","markAsSeen","getState","state","hnItems","urls","items","slice","forEach","id","undefined","push","Promise","all","map","url","method","headers","body","then","console","log","toggleItemStatus","message","initialHNItemsState","itemsLoading","error","selectedItem","statusesLoading","hnItemsReducer","action","newStatuses","itm","idx","showPrefsAction","editListSizeAction","editColorAction","color","closePrefsAction","closeAndApplyPrefsAction","initialPreferencesState","showingPrefs","editingColor","editingListSize","currentColor","currentListSize","preferencesReducer","changes","mainReducer","prefs"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\n// import { produce } from 'immer'\n\n//=====================================================================\n//    State management for HN Items and their read/seen-statuses\n//---------------------------------------------------------------------\n\n// Action Creators:\n\nexport function markAsSeenAction(listSize) {\n  return { type: 'markAsSeenAction', listSize };\n}\n\nexport function toggleItemAction(item) {\n  return { type: 'toggleItemAction', payload: item };\n}\n\nexport const fetchHNItems = () => async (dispatch) => {\n  dispatch({ type: 'hnitems/loading' });\n  try {\n    const response = await fetch('http://localhost:3000/hn/topstories');\n    if (!response.ok) throw new Error();\n    const HNItems = await response.json();\n    return dispatch({ type: 'hnitems/loaded', payload: HNItems });\n  } catch (err) {\n    return dispatch({ type: 'hnitems/error', payload: 'error loading items!' });\n  }\n};\n\nexport const fetchStatuses = () => async (dispatch) => {\n  dispatch({ type: 'fetchStatuses/loading' });\n  try {\n    const response = await fetch('http://localhost:3000/itemStatuses');\n    if (!response.ok) throw new Error();\n    const statuses = await response.json();\n    return dispatch({ type: 'fetchStatuses/loaded', payload: statuses });\n  } catch (err) {\n    return dispatch({\n      type:    'fetchStatuses/error',\n      payload: 'error loading statuses!',\n    });\n  }\n};\n\nexport const markAsSeen = (listSize) => async (dispatch, getState) => {\n  dispatch({ type: 'updateStatuses/loading' });\n  try {\n    const state = getState().hnItems;\n    const urls  = [];\n\n    state.items.slice(0, listSize).forEach(item => {\n      if (state.statuses[item.id] === undefined) {\n        urls.push(`http://localhost:3000/itemStatuses/${item.id}`);\n      }\n    });\n\n    await Promise.all(\n      urls.map((url) =>\n        fetch(url, {\n          method:  'PUT',\n          headers: {\n            'Content-Type': 'text/plain',\n          },\n          body:    'seen',\n        })\n          .then((response) => {\n            if (!response.ok) throw new Error();\n          })\n          .then(() => console.log(url))\n      )\n    );\n    dispatch({ type: 'updateStatuses/success', payload: listSize });\n  } catch (err) {\n    dispatch({\n      type:    'updateStatuses/error',\n      payload: 'Error updating statuses!',\n    });\n  }\n};\n\nexport const toggleItemStatus = (item) => async (dispatch, getState) => {\n  dispatch({ type: 'toggleStatus/loading' });\n  try {\n    const response = await fetch(\n      `http://localhost:3000/itemStatuses/${item.id}`,\n      {\n        method:  'PUT',\n        headers: {\n          'Content-Type': 'text/plain',\n        },\n        body:    'read',\n      }\n    );\n    if (!response.ok) throw new Error();\n\n    dispatch({ type: 'toggleStatus/success', payload: item });\n  } catch (err) {\n    dispatch({ type: 'toggleStatus/error', payload: err.message });\n  }\n};\n\n// Reducer:\n\nconst initialHNItemsState = {\n  items:           [],\n  itemsLoading:    false,\n  error:           null,\n  selectedItem:    null,\n  statuses:        [],\n  statusesLoading: false,\n};\n\nfunction hnItemsReducer(state = initialHNItemsState, action) {\n  // Note how all branches of the switch-statement always return\n  // (a new version of) the state. Reducers must always return a (new) state.\n  switch (action.type) {\n    case 'hnitems/loaded':\n      return { ...state, items: action.payload, itemsLoading: false };\n    case 'hnitems/loading':\n      return { ...state, itemsLoading: true };\n    case 'hnitems/error':\n      return { ...state, itemsLoading: false, error: action.payload };\n    case 'fetchStatuses/loaded':\n      return { ...state, statuses: action.payload, statusesLoading: false };\n    case 'fetchStatuses/loading':\n      return { ...state, statusesLoading: true };\n    case 'fetchStatuses/error':\n      return { ...state, statusesLoading: false, error: action.payload };\n    case 'updateStatus/loading':\n      return { ...state, statusesLoading: true };\n    case 'updateStatus/error':\n      return { ...state, statusesLoading: false, error: action.payload };\n    case 'toggleStatus/loading':\n      return { ...state, statusesLoading: true };\n    case 'toggleStatus/success':\n      if (state.selectedItem) {\n        if (action.payload.id === state.selectedItem.id) {\n          return { ...state, selectedItem: null };\n        }\n      }\n      let newStatuses = { ...state.statuses, [action.payload.id]: 'read' };\n      return {\n        ...state,\n        selectedItem:    action.payload,\n        statuses:        newStatuses,\n        statusesLoading: false,\n      };\n    case 'toggleStatus/error':\n      return { ...state, error: action.payload, statusesLoading: false };\n    case 'updateStatuses/success':\n      newStatuses = { ...state.statuses };\n      state.items.forEach((itm, idx) => {\n        if (idx < action.payload && state.statuses[itm.id] === undefined) {\n          newStatuses[itm.id] = 'seen';\n        }\n      });\n      return { ...state, statuses: newStatuses, statusesLoading: false };\n    case 'updateStatuses/loading':\n      return { ...state, statusesLoading: true };\n    case 'updateStatuses/error':\n      return { ...state, error: action.payload };\n\n    default:\n      return state;\n  }\n}\n\n// ==============================================================\n//\n// using immer.js\n//\n\n// function hnItemsReducer(state = initialHNItemsState, action) {\n//   const reducers = {\n//     toggleItemAction: (draft, action) => {\n//       if (\n//         draft.item &&\n//         draft.selectedItem &&\n//         draft.item.id === draft.selectedItem.id\n//       ) {\n//         draft.selectedItem = null;\n//       } else {\n//         draft.statuses[action.item.id] = \"read\";\n//         draft.selectedItem = action.item;\n//       }\n//     },\n\n//     markAsSeenAction: (draft, action) => {\n//       draft.items.forEach((itm, idx) => {\n//         if (idx < action.listSize && draft.statuses[itm.id] === undefined) {\n//           draft.statuses[itm.id] = \"seen\";\n//         }\n//       });\n//     },\n//   };\n\n//   return produce(state, (draft) =>\n//     reducers[action.type] ? reducers[action.type](draft, action) : draft\n//   );\n// }\n\n//=====================================================================\n//    State management for the Preferences\n//---------------------------------------------------------------------\n\n// Action Creators:\n\nexport function showPrefsAction() {\n  return { type: 'showPrefsAction' };\n}\n\nexport function editListSizeAction(listSize) {\n  return { type: 'editListSizeAction', payload: listSize };\n}\n\nexport function editColorAction(color) {\n  return { type: 'editColorAction', payload: color };\n}\n\nexport function closePrefsAction() {\n  return { type: 'closePrefsAction' };\n}\n\nexport function closeAndApplyPrefsAction() {\n  return { type: 'closeAndApplyPrefsAction' };\n}\n\n// TODO: Add action creators for other redux-actions such as Cancel and OK, but also for editing controlled inputs for color and listSize.\n\n// Reducer:\n\nconst initialPreferencesState = {\n  showingPrefs:    false,\n  editingColor:    null,\n  editingListSize: null,\n  currentColor:    'orange',\n  currentListSize: 42,\n};\n\nfunction preferencesReducer(state = initialPreferencesState, action) {\n  // Note how all branches of the switch-statement always return\n  // (a new version of) the state. Reducers must always return a (new) state.\n  let changes;\n  switch (action.type) {\n    case 'showPrefsAction':\n      changes = {\n        showingPrefs:    true,\n        editingColor:    state.currentColor,\n        editingListSize: state.currentListSize,\n      };\n      return { ...state, ...changes };\n    // break; not needed: this branch always returns from function\n    case 'editListSizeAction':\n      changes = {\n        editingListSize: action.payload,\n      };\n      return { ...state, ...changes };\n    case 'editColorAction':\n      changes = {\n        editingColor: action.payload,\n      };\n      return { ...state, ...changes };\n    case 'closePrefsAction':\n      changes = {\n        showingPrefs:    false,\n        editingColor:    null,\n        editingListSize: null,\n      };\n      return { ...state, ...changes };\n    case 'closeAndApplyPrefsAction':\n      changes = {\n        showingPrefs:    false,\n        editingColor:    null,\n        editingListSize: null,\n        currentColor:    state.editingColor,\n        currentListSize: state.editingListSize,\n      };\n      return { ...state, ...changes };\n    default:\n      return state;\n  }\n}\n\n//===========================================================================\n//  Combining the reducers and their state into a single reducer managing\n//  a single state\n//---------------------------------------------------------------------------\n\nexport const mainReducer = combineReducers({\n  hnItems: hnItemsReducer,\n  prefs:   preferencesReducer,\n});\n"]},"metadata":{},"sourceType":"module"}